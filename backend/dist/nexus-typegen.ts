/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./api/context.js"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CartsProducts: { // input type
    id: string; // String!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Cart: { // root type
    id?: string | null; // String
    name?: string | null; // String
    user_id?: string | null; // String
  }
  CartProduct: { // root type
    cart_id?: string | null; // String
    checked?: boolean | null; // Boolean
    id?: string | null; // String
    product_id?: string | null; // String
    quantity?: number | null; // Int
  }
  Mutation: {};
  Product: { // root type
    desc?: string | null; // String
    id?: string | null; // String
    image?: string | null; // String
    name?: string | null; // String
    price?: number | null; // Float
  }
  Query: {};
  User: { // root type
    address?: string | null; // String
    email?: string | null; // String
    id?: string | null; // String
    password?: string | null; // String
    token?: string | null; // String
    username?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Cart: { // field return type
    cartProducts: Array<NexusGenRootTypes['CartProduct'] | null> | null; // [CartProduct]
    id: string | null; // String
    name: string | null; // String
    user_id: string | null; // String
  }
  CartProduct: { // field return type
    cart: NexusGenRootTypes['Cart'] | null; // Cart
    cart_id: string | null; // String
    checked: boolean | null; // Boolean
    id: string | null; // String
    product: NexusGenRootTypes['Product'] | null; // Product
    product_id: string | null; // String
    quantity: number | null; // Int
  }
  Mutation: { // field return type
    addProductToCart: NexusGenRootTypes['Cart']; // Cart!
    cartProductDelete: NexusGenRootTypes['CartProduct']; // CartProduct!
    cartProductUpdateCheck: NexusGenRootTypes['CartProduct']; // CartProduct!
    cartProductUpdateQty: NexusGenRootTypes['CartProduct']; // CartProduct!
    createCart: NexusGenRootTypes['Cart']; // Cart!
    createCartProduct: NexusGenRootTypes['CartProduct']; // CartProduct!
    createProduct: NexusGenRootTypes['Product']; // Product!
    createUser: NexusGenRootTypes['User']; // User!
    userLogin: NexusGenRootTypes['User'] | null; // User
    userRegister: NexusGenRootTypes['User'] | null; // User
  }
  Product: { // field return type
    desc: string | null; // String
    id: string | null; // String
    image: string | null; // String
    name: string | null; // String
    price: number | null; // Float
  }
  Query: { // field return type
    authUser: NexusGenRootTypes['User'] | null; // User
    cart: NexusGenRootTypes['Cart']; // Cart!
    cartProductByCart: Array<NexusGenRootTypes['CartProduct'] | null>; // [CartProduct]!
    carts: Array<NexusGenRootTypes['Cart'] | null>; // [Cart]!
    cartsByUser: Array<NexusGenRootTypes['Cart'] | null>; // [Cart]!
    cartsProducts: Array<NexusGenRootTypes['CartProduct'] | null>; // [CartProduct]!
    products: Array<NexusGenRootTypes['Product'] | null>; // [Product]!
    users: Array<NexusGenRootTypes['User'] | null>; // [User]!
  }
  User: { // field return type
    address: string | null; // String
    email: string | null; // String
    id: string | null; // String
    password: string | null; // String
    token: string | null; // String
    username: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Cart: { // field return type name
    cartProducts: 'CartProduct'
    id: 'String'
    name: 'String'
    user_id: 'String'
  }
  CartProduct: { // field return type name
    cart: 'Cart'
    cart_id: 'String'
    checked: 'Boolean'
    id: 'String'
    product: 'Product'
    product_id: 'String'
    quantity: 'Int'
  }
  Mutation: { // field return type name
    addProductToCart: 'Cart'
    cartProductDelete: 'CartProduct'
    cartProductUpdateCheck: 'CartProduct'
    cartProductUpdateQty: 'CartProduct'
    createCart: 'Cart'
    createCartProduct: 'CartProduct'
    createProduct: 'Product'
    createUser: 'User'
    userLogin: 'User'
    userRegister: 'User'
  }
  Product: { // field return type name
    desc: 'String'
    id: 'String'
    image: 'String'
    name: 'String'
    price: 'Float'
  }
  Query: { // field return type name
    authUser: 'User'
    cart: 'Cart'
    cartProductByCart: 'CartProduct'
    carts: 'Cart'
    cartsByUser: 'Cart'
    cartsProducts: 'CartProduct'
    products: 'Product'
    users: 'User'
  }
  User: { // field return type name
    address: 'String'
    email: 'String'
    id: 'String'
    password: 'String'
    token: 'String'
    username: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addProductToCart: { // args
      card_id: string; // String!
      products: Array<NexusGenInputs['CartsProducts'] | null>; // [CartsProducts]!
    }
    cartProductDelete: { // args
      cartProduct_id: string; // String!
    }
    cartProductUpdateCheck: { // args
      cartProduct_id: string; // String!
      checked: boolean; // Boolean!
    }
    cartProductUpdateQty: { // args
      cartProduct_id: string; // String!
      quantity: number; // Int!
    }
    createCart: { // args
      name: string; // String!
      products?: Array<NexusGenInputs['CartsProducts'] | null> | null; // [CartsProducts]
      user_id: string; // String!
    }
    createCartProduct: { // args
      cart_id: string; // String!
      product_id: string; // String!
      quantity: number; // Int!
    }
    createProduct: { // args
      desc?: string | null; // String
      image: string; // String!
      name: string; // String!
      price: number; // Float!
    }
    createUser: { // args
      address: string; // String!
      email: string; // String!
      password: string; // String!
      username: string; // String!
    }
    userLogin: { // args
      email: string; // String!
      password: string; // String!
    }
    userRegister: { // args
      address: string; // String!
      email: string; // String!
      password: string; // String!
      username: string; // String!
    }
  }
  Query: {
    cart: { // args
      cart_id: string; // String!
    }
    cartProductByCart: { // args
      cart_id: string; // String!
    }
    cartsByUser: { // args
      user_id: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}